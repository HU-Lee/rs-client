{"version":3,"sources":["types/constant.ts","components/atoms/button.tsx","components/atoms/container.tsx","components/style/theme.ts","components/util/ThemeContext.tsx","components/pages/FreePage.tsx","components/molecules/LogoImage.tsx","components/util/Apis.ts","components/molecules/NaverLoginButton.tsx","components/pages/LoginPage.tsx","components/pages/MainPage.tsx","components/util/Cookie.ts","components/molecules/LogoutButton.tsx","components/organisms/RsHeader.tsx","AppRouter.tsx","components/style/globalStyles.tsx","App.tsx","index.tsx"],"names":["NAVER_ACCESS","BASE_PATH","baseStyle","css","prop","ifProp","withProp","x","Button","styled","button","ToggleButton","label","Wrapper","div","flex","Header","theme","lightMode","titleColor","bgColor","darkMode","ThemeContext","createContext","isDark","darkToggler","ThemeContextProvider","children","useState","window","localStorage","getItem","setisDark","Provider","value","setItem","FreePage","useContext","onClick","location","href","round","width","base","sub","ImageWrapper","img","LogoImage","src","alt","client","axios","create","baseURL","NaverLogin","NaverLoginButton","dark","url","params","get","then","res","data","success","redirectUrl","LoginPage","MainPage","role","name","cookies","Cookies","LogoutButton","remove","path","alert","RsHeader","props","type","checked","onChange","isAuth","AppRouter","User","setUser","useEffect","URL","code","searchParams","state","accessToken","body","post","postAPI","set","history","pushState","document","title","basename","exact","render","GlobalStyles","createGlobalStyle","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.76acff9e.chunk.js","sourcesContent":["export const NAVER_ACCESS = \"rs_n_a\"\r\n\r\nexport const BASE_PATH = \"/rs-client\"","import styled, { css } from \"styled-components\";\r\nimport { ifProp, prop, withProp } from \"styled-tools\";\r\n\r\ninterface ButtonProps {\r\n    width?: number,\r\n    height?: number,\r\n    base?: string,\r\n    sub?: string,\r\n    round?: boolean,\r\n}\r\n\r\nconst baseStyle = css`\r\n    all: unset;\r\n    cursor: pointer;\r\n\r\n    width: ${prop(\"width\", 100)}px;\r\n    height: ${prop(\"height\", 40)}px;\r\n\r\n    border: 2px solid ${prop(\"base\", \"black\")};\r\n    border-radius: ${ifProp(\"round\", withProp(\"height\", x => x ? x/2 : 20), 0)}px;\r\n    box-sizing: border-box;\r\n\r\n    color: ${prop(\"base\", \"black\")};\r\n\r\n    margin: 5px;\r\n    transition: 0.5s all;\r\n\r\n    text-align: center;\r\n    font-weight: 600;\r\n\r\n    &:hover {\r\n        background-color: ${prop(\"base\", \"black\")};\r\n        color: ${prop(\"sub\", \"white\")};\r\n    }\r\n`\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n    ${baseStyle}\r\n`\r\n\r\n// 테마 변경용 토글 버튼\r\nexport const ToggleButton = styled.label`\r\n    margin: 5px 15px 5px 15px;\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 60px;\r\n    height: 26px;\r\n\r\n    input {\r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n    }\r\n    span {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: gray;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 34px;\r\n    }\r\n    span:before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 20px;\r\n        width: 20px;\r\n        left: 3px;\r\n        bottom: 3px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n    }\r\n    input:checked + span {\r\n      background-color: #FFF2CC;\r\n    }\r\n    input:focus + span {\r\n      box-shadow: 0 0 1px #FFF2CC;\r\n    }\r\n    input:checked + span:before {\r\n      -webkit-transform: translateX(34px);\r\n      -ms-transform: translateX(34px);\r\n      transform: translateX(34px);\r\n      background-color: black;\r\n    }\r\n`","import styled from \"styled-components\";\r\nimport { ifProp } from \"styled-tools\";\r\n\r\ninterface ContainerProps {\r\n    flex?: string,\r\n}\r\n\r\nexport const Wrapper = styled.div<ContainerProps>`\r\n    width: 100%;\r\n    min-height: 70vh;\r\n\r\n    display: flex;\r\n    flex-direction: ${ifProp({flex: \"column\"}, \"column\", \"row\")};\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n`\r\n\r\nexport const Header = styled(Wrapper)<ContainerProps>`\r\n    height: 50px;\r\n    min-height: 60px;\r\n    \r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    line-height: 20px;\r\n`","// Dark Mode, Light Mode\r\n\r\nconst darkMode = {\r\n    titleColor : 'white',\r\n    bgColor: 'black',\r\n}\r\n\r\nconst lightMode ={\r\n    titleColor : 'black',\r\n    bgColor: 'white',\r\n}\r\n\r\nexport const theme = {\r\n    lightMode,\r\n    darkMode\r\n}\r\n","import React, { createContext, useState } from 'react'\r\nimport { theme } from \"../style/theme\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n\r\n/**\r\n * @summary     테마를 useContext로 전역 관리\r\n * @var         isDark 다크 모드 여부\r\n * @function    darkToggler 다크 모드 전환 함수\r\n */\r\nexport const ThemeContext = createContext({\r\n    isDark: false,\r\n    darkToggler: () => {}\r\n})\r\n\r\n// Provider\r\nconst ThemeContextProvider: React.FC<React.ReactNode> = ({children}) => {\r\n\r\n    const [isDark, setisDark] = useState(window.localStorage.getItem(\"rs_theme\") === \"dark\")\r\n    const darkToggler = () => { \r\n        setisDark(!isDark) \r\n        // 로컬 스토리지에 다크 모드 저장\r\n        window.localStorage.setItem(\"rs_theme\", isDark ? \"light\" : \"dark\")\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{isDark, darkToggler}}>\r\n            <ThemeProvider theme={isDark ? theme.darkMode : theme.lightMode}>\r\n                {children}\r\n            </ThemeProvider>\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ThemeContextProvider\r\n","import { useContext } from 'react'\r\nimport { BASE_PATH } from '../../types/constant'\r\nimport { Button } from '../atoms/button'\r\nimport { Wrapper } from '../atoms/container'\r\nimport { ThemeContext } from '../util/ThemeContext'\r\n\r\nconst FreePage: React.FC = () => {\r\n\r\n    const { isDark } = useContext(ThemeContext)\r\n\r\n    return (\r\n        <Wrapper flex=\"column\">\r\n            <h1>Free Page</h1>\r\n            <Button\r\n                onClick = {() => window.location.href = `${BASE_PATH}/`} \r\n                round width={150}\r\n                base={isDark ? \"white\" : \"black\"}\r\n                sub={isDark ? \"black\" : \"white\"}\r\n            >\r\n                    돌아가기\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default FreePage","import styled from \"styled-components\";\r\nimport { prop } from \"styled-tools\";\r\n\r\ninterface LogoProps {\r\n    width?: number\r\n}\r\n\r\nconst ImageWrapper = styled.img<LogoProps>`\r\n    width: ${prop(\"width\", 240)}px;\r\n    height: ${prop(\"width\", 240)}px;\r\n`\r\n\r\nexport const LogoImage = ({ width }: LogoProps) => (\r\n    <ImageWrapper width={width} src=\"./images/logo.png\" alt=\"logo\"/>\r\n)","import axios from \"axios\";\r\n\r\n\r\nconst client = axios.create({\r\n    baseURL: \"https://rs-go.herokuapp.com\",\r\n})\r\n\r\nexport const getAPI = (url:string, params?: object) => {\r\n    return client.get(url, params)\r\n}\r\n\r\nexport const postAPI = (url:string, body: object) => {\r\n    return client.post(url, body)\r\n}","import styled from \"styled-components\";\r\nimport { getAPI } from \"../util/Apis\";\r\n\r\nconst NaverLogin = styled.img`\r\n    cursor: pointer;\r\n    width: 250px;\r\n    margin: 20px;\r\n`\r\n\r\nexport const NaverLoginButton = ({dark}: DarkProps) => {\r\n\r\n    const loginNaver = () => {\r\n        getAPI(\"/naver/login\")\r\n        .then((res) => {\r\n            if (res.data.success) {\r\n                window.location.href = res.data.redirectUrl\r\n            }\r\n        })\r\n    }\r\n\r\n    return <NaverLogin src={`./images/naver-login-${dark ? \"dark\" : \"light\"}.png`} \r\n                       alt=\"로그인\" onClick={loginNaver}/>\r\n}","import { useContext } from 'react'\r\nimport { BASE_PATH } from '../../types/constant'\r\nimport { Button } from '../atoms/button'\r\nimport { Wrapper } from '../atoms/container'\r\nimport { LogoImage } from '../molecules/LogoImage'\r\nimport { NaverLoginButton } from '../molecules/NaverLoginButton'\r\nimport { ThemeContext } from '../util/ThemeContext'\r\n\r\nconst LoginPage: React.FC = () => {\r\n\r\n    const { isDark } = useContext(ThemeContext)\r\n\r\n    return (\r\n        <Wrapper flex=\"column\">\r\n            <LogoImage/>\r\n            <NaverLoginButton dark={isDark}/>\r\n            <Button\r\n                onClick = {() => window.location.href = `${BASE_PATH}/free`}  \r\n                round width={150}\r\n                base={isDark ? \"white\" : \"black\"}\r\n                sub={isDark ? \"black\" : \"white\"}\r\n            >\r\n                    샘플 페이지\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import { Wrapper } from \"../atoms/container\"\r\nimport { LogoImage } from \"../molecules/LogoImage\"\r\n\r\nconst MainPage: React.FC<UserInfo> = ({role, name}) => {\r\n    return (\r\n        <Wrapper flex=\"column\">\r\n            <LogoImage/>\r\n            {role && role > 9 ? <>\r\n                <h1>안녕하세요 가족 여러분!</h1>\r\n                <h2>당신은 {name}님이군요!</h2>  \r\n            </> : <>\r\n                <h1>Welcome!</h1>  \r\n            </>}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default MainPage\r\n","import Cookies from \"universal-cookie\";\r\nimport { NAVER_ACCESS } from \"../../types/constant\";\r\n\r\n/**\r\n * @summary 쿠키를 관리하는 함수들\r\n */\r\nconst cookies = new Cookies()\r\n\r\nexport const setNaverToken = (accessToken: string) => {\r\n    return cookies.set(NAVER_ACCESS, accessToken, {path: \"/\"})\r\n}\r\n\r\nexport const getNaverToken = () => {\r\n    return cookies.get(NAVER_ACCESS)\r\n}\r\n\r\nexport const removeNaverTokens = () => {\r\n    cookies.remove(NAVER_ACCESS, {path: \"/\"})\r\n}","import { BASE_PATH } from \"../../types/constant\"\r\nimport { Button } from \"../atoms/button\"\r\nimport { removeNaverTokens } from \"../util/Cookie\"\r\n\r\nconst LogoutButton = ({dark}: DarkProps) => {\r\n    \r\n    const handleLogout = () => {\r\n        removeNaverTokens()\r\n        alert(\"로그아웃 되었습니다!\")\r\n        // window.location.href = \"/\"\r\n        window.location.href = `${BASE_PATH}/`\r\n    }\r\n\r\n    return (\r\n        <Button onClick={handleLogout} \r\n                base={dark ? \"white\" : \"black\"}\r\n                sub={dark ? \"black\" : \"white\"}\r\n                round\r\n        >\r\n            로그아웃\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton\r\n","import { useContext } from 'react'\r\nimport { ToggleButton } from '../atoms/button'\r\nimport { Header } from '../atoms/container'\r\nimport LogoutButton from '../molecules/LogoutButton'\r\nimport { ThemeContext } from '../util/ThemeContext'\r\n\r\nconst RsHeader = (props: UserInfo) => {\r\n\r\n    const { isDark, darkToggler } = useContext(ThemeContext)\r\n\r\n    return (\r\n        <Header>\r\n            테마 변경\r\n            <ToggleButton>\r\n                <input type=\"checkbox\" checked={isDark} onChange={darkToggler}/>\r\n                <span/>\r\n            </ToggleButton>\r\n            {props.isAuth ? <LogoutButton dark={isDark}/> : null}\r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default RsHeader","import { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport FreePage from \"./components/pages/FreePage\"\r\nimport LoginPage from \"./components/pages/LoginPage\"\r\nimport MainPage from \"./components/pages/MainPage\"\r\nimport { postAPI } from \"./components/util/Apis\";\r\nimport RsHeader from \"./components/organisms/RsHeader\";\r\nimport { getNaverToken, setNaverToken } from \"./components/util/Cookie\";\r\nimport { BASE_PATH } from \"./types/constant\";\r\n\r\nfunction AppRouter() {\r\n\r\n    const [User, setUser] = useState<UserInfo>()\r\n\r\n    // auth by naver\r\n    useEffect(() => {\r\n        const url = new URL(window.location.href)\r\n        const data = {\r\n            code: url.searchParams.get(\"code\"),\r\n            state: url.searchParams.get(\"state\"),\r\n            accessToken: getNaverToken()\r\n        }\r\n        postAPI(\"/naver/auth\", data)\r\n        .then((res) => {\r\n            setUser(res.data)\r\n            if (res.data.isAuth) {\r\n            setNaverToken(res.data.accessToken)\r\n            }\r\n            if (data.code || data.state) {\r\n            // window.history.pushState({}, document.title, \"/\")\r\n            window.history.pushState({}, document.title, `${BASE_PATH}/`)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return ( !User ? null :\r\n        <Router basename=\"/rs-client/\">\r\n            <RsHeader {...User}/>\r\n            <Switch>\r\n                <Route exact path=\"/free\" render={() => <FreePage/>}/>\r\n                {!User.isAuth ? \r\n                    <Route exact path=\"/\" render={() => <LoginPage/>}/> :\r\n                    <Route exact path=\"/\" render={() => <MainPage {...User}/>}/>\r\n                }\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${(props: ThemeProps) => props.theme.bgColor};\r\n    color: ${(props: ThemeProps) => props.theme.titleColor};\r\n    transition: all 0.50s linear;\r\n  }\r\n`","import AppRouter from \"./AppRouter\";\nimport { GlobalStyles } from \"./components/style/globalStyles\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles/>\n      <AppRouter/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ThemeContextProvider from './components/util/ThemeContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContextProvider>\n      <App />\n    </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}