{"version":3,"sources":["components/pages/FreePage.tsx","components/atoms/container.tsx","components/molecules/LogoImage.tsx","components/util/Apis.ts","components/molecules/NaverLoginButton.tsx","components/style/theme.ts","components/util/ThemeContext.tsx","components/pages/LoginPage.tsx","components/pages/MainPage.tsx","AppRouter.tsx","components/atoms/button.tsx","types/constant.ts","components/util/Cookie.ts","components/molecules/LogoutButton.tsx","components/organisms/RsHeader.tsx","components/style/globalStyles.tsx","App.tsx","index.tsx"],"names":["FreePage","Wrapper","styled","div","ifProp","flex","Header","ImageWrapper","img","prop","LogoImage","width","src","alt","client","axios","create","baseURL","NaverLogin","NaverLoginButton","dark","onClick","url","params","get","then","res","data","success","window","location","href","redirectUrl","theme","lightMode","titleColor","bgColor","darkMode","ThemeContext","createContext","isDark","darkToggler","ThemeContextProvider","children","useState","localStorage","getItem","setisDark","Provider","value","setItem","LoginPage","useContext","MainPage","role","name","AppRouter","props","basename","isAuth","exact","path","component","Button","button","withProp","x","ToggleButton","label","NAVER_ACCESS","cookies","Cookies","LogoutButton","remove","alert","base","sub","RsHeader","type","checked","onChange","GlobalStyles","createGlobalStyle","App","User","setUser","getAuthInfo","URL","code","searchParams","state","accessToken","body","post","postAPI","set","history","pushState","document","title","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6dae290c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction FreePage() {\r\n    return (\r\n        <div>\r\n            Free\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FreePage","import styled from \"styled-components\";\r\nimport { ifProp } from \"styled-tools\";\r\n\r\ninterface ContainerProps {\r\n    flex?: string,\r\n}\r\n\r\nexport const Wrapper = styled.div<ContainerProps>`\r\n    width: 100%;\r\n    min-height: 70vh;\r\n\r\n    display: flex;\r\n    flex-direction: ${ifProp({flex: \"column\"}, \"column\", \"row\")};\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n`\r\n\r\nexport const Header = styled(Wrapper)<ContainerProps>`\r\n    height: 50px;\r\n    min-height: 60px;\r\n    \r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    line-height: 20px;\r\n`","import styled from \"styled-components\";\r\nimport { prop } from \"styled-tools\";\r\n\r\ninterface LogoProps {\r\n    width?: number\r\n}\r\n\r\nconst ImageWrapper = styled.img<LogoProps>`\r\n    width: ${prop(\"width\", 240)}px;\r\n    height: ${prop(\"width\", 240)}px;\r\n`\r\n\r\nexport const LogoImage = ({ width }: LogoProps) => (\r\n    <ImageWrapper width={width} src=\"./images/logo.png\" alt=\"logo\"/>\r\n)","import axios from \"axios\";\r\n\r\n\r\nconst client = axios.create({\r\n    baseURL: \"https://rs-go.herokuapp.com\",\r\n})\r\n\r\nexport const getAPI = (url:string, params?: object) => {\r\n    return client.get(url, params)\r\n}\r\n\r\nexport const postAPI = (url:string, body: object) => {\r\n    return client.post(url, body)\r\n}","import styled from \"styled-components\";\r\nimport { getAPI } from \"../util/Apis\";\r\n\r\nconst NaverLogin = styled.img`\r\n    cursor: pointer;\r\n    width: 250px;\r\n`\r\n\r\nexport const NaverLoginButton = ({dark}: DarkProps) => {\r\n\r\n    const loginNaver = () => {\r\n        getAPI(\"/naver/login\")\r\n        .then((res) => {\r\n            if (res.data.success) {\r\n                window.location.href = res.data.redirectUrl\r\n            }\r\n        })\r\n    }\r\n\r\n    return <NaverLogin src={`./images/naver-login-${dark ? \"dark\" : \"light\"}.png`} \r\n                       alt=\"로그인\" onClick={loginNaver}/>\r\n}","// Dark Mode, Light Mode\r\n\r\nconst darkMode = {\r\n    titleColor : 'white',\r\n    bgColor: 'black',\r\n}\r\n\r\nconst lightMode ={\r\n    titleColor : 'black',\r\n    bgColor: 'white',\r\n}\r\n\r\nexport const theme = {\r\n    lightMode,\r\n    darkMode\r\n}\r\n","import React, { createContext, useState } from 'react'\r\nimport { theme } from \"../style/theme\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n\r\n/**\r\n * @summary     테마를 useContext로 전역 관리\r\n * @var         isDark 다크 모드 여부\r\n * @function    darkToggler 다크 모드 전환 함수\r\n */\r\nexport const ThemeContext = createContext({\r\n    isDark: false,\r\n    darkToggler: () => {}\r\n})\r\n\r\n// Provider\r\nconst ThemeContextProvider: React.FC<React.ReactNode> = ({children}) => {\r\n\r\n    const [isDark, setisDark] = useState(window.localStorage.getItem(\"rs_theme\") === \"dark\")\r\n    const darkToggler = () => { \r\n        setisDark(!isDark) \r\n        // 로컬 스토리지에 다크 모드 저장\r\n        window.localStorage.setItem(\"rs_theme\", isDark ? \"light\" : \"dark\")\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{isDark, darkToggler}}>\r\n            <ThemeProvider theme={isDark ? theme.darkMode : theme.lightMode}>\r\n                {children}\r\n            </ThemeProvider>\r\n        </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ThemeContextProvider\r\n","import { useContext } from 'react'\r\nimport { Wrapper } from '../atoms/container'\r\nimport { LogoImage } from '../molecules/LogoImage'\r\nimport { NaverLoginButton } from '../molecules/NaverLoginButton'\r\nimport { ThemeContext } from '../util/ThemeContext'\r\n\r\nfunction LoginPage() {\r\n\r\n    const { isDark } = useContext(ThemeContext)\r\n\r\n    return (\r\n        <Wrapper flex=\"column\">\r\n            <LogoImage/>\r\n            <NaverLoginButton dark={isDark}/>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import { Wrapper } from \"../atoms/container\"\r\nimport { LogoImage } from \"../molecules/LogoImage\"\r\n\r\nconst MainPage = ({role, name}: UserInfo) => {\r\n    return (\r\n        <Wrapper flex=\"column\">\r\n            <LogoImage/>\r\n            {role && role > 9 ? <>\r\n                <h1>안녕하세요 가족 여러분!</h1>\r\n                <h2>당신은 {name}님이군요!</h2>  \r\n            </> : <>\r\n                <h1>Welcome!</h1>  \r\n            </>}\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default MainPage\r\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport FreePage from \"./components/pages/FreePage\"\r\nimport LoginPage from \"./components/pages/LoginPage\"\r\nimport MainPage from \"./components/pages/MainPage\"\r\n\r\nfunction AppRouter(props: UserInfo) {\r\n    return (\r\n        <Router basename=\"/rs-client\">\r\n            <Switch>\r\n                {!props.isAuth ? <>\r\n                    <Route exact path=\"/\" component={LoginPage}/>\r\n                </> : <>\r\n                    <Route exact path=\"/\" component={() => <MainPage {...props}/>}/>\r\n                </>}\r\n                <Route exact path=\"/free\" component={FreePage}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import styled from \"styled-components\";\r\nimport { ifProp, prop, withProp } from \"styled-tools\";\r\n\r\ninterface ButtonProps {\r\n    width?: number,\r\n    height?: number,\r\n    base?: string,\r\n    sub?: string,\r\n    round?: boolean,\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n    all: unset;\r\n    cursor: pointer;\r\n\r\n    width: ${prop(\"width\", 100)}px;\r\n    height: ${prop(\"height\", 40)}px;\r\n\r\n    border: 2px solid ${prop(\"base\", \"black\")};\r\n    border-radius: ${ifProp(\"round\", withProp(\"height\", x => x ? x/2 : 20), 0)}px;\r\n    box-sizing: border-box;\r\n\r\n    color: ${prop(\"base\", \"black\")};\r\n    \r\n    margin: 5px;\r\n    transition: 0.5s all;\r\n\r\n    text-align: center;\r\n    font-weight: 600;\r\n\r\n    &:hover {\r\n        background-color: ${prop(\"base\", \"black\")};\r\n        color: ${prop(\"sub\", \"white\")};\r\n    }\r\n`\r\n\r\n// 테마 변경용 토글 버튼\r\nexport const ToggleButton = styled.label`\r\n    margin: 5px 15px 5px 15px;\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 60px;\r\n    height: 26px;\r\n\r\n    input {\r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n    }\r\n    span {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: gray;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 34px;\r\n    }\r\n    span:before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 20px;\r\n        width: 20px;\r\n        left: 3px;\r\n        bottom: 3px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        border-radius: 50%;\r\n    }\r\n    input:checked + span {\r\n      background-color: #FFF2CC;\r\n    }\r\n    input:focus + span {\r\n      box-shadow: 0 0 1px #FFF2CC;\r\n    }\r\n    input:checked + span:before {\r\n      -webkit-transform: translateX(34px);\r\n      -ms-transform: translateX(34px);\r\n      transform: translateX(34px);\r\n      background-color: black;\r\n    }\r\n`","export const NAVER_ACCESS = \"rs_n_a\"","import Cookies from \"universal-cookie\";\r\nimport { NAVER_ACCESS } from \"../../types/constant\";\r\n\r\n/**\r\n * @summary 쿠키를 관리하는 함수들\r\n */\r\nconst cookies = new Cookies()\r\n\r\nexport const setNaverToken = (accessToken: string) => {\r\n    return cookies.set(NAVER_ACCESS, accessToken, {path: \"/\"})\r\n}\r\n\r\nexport const getNaverToken = () => {\r\n    return cookies.get(NAVER_ACCESS)\r\n}\r\n\r\nexport const removeNaverTokens = () => {\r\n    cookies.remove(NAVER_ACCESS, {path: \"/\"})\r\n}","import { Button } from \"../atoms/button\"\r\nimport { removeNaverTokens } from \"../util/Cookie\"\r\n\r\nconst LogoutButton = ({dark}: DarkProps) => {\r\n    \r\n    const handleLogout = () => {\r\n        removeNaverTokens()\r\n        alert(\"로그아웃 되었습니다!\")\r\n        // window.location.href = \"/\"\r\n        window.location.href = \"/rs-client/\"\r\n    }\r\n\r\n    return (\r\n        <Button onClick={handleLogout} \r\n                base={dark ? \"black\" : \"white\"}\r\n                sub={dark ? \"white\" : \"black\"}\r\n        >\r\n            로그아웃\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton\r\n","import { useContext } from 'react'\r\nimport { ToggleButton } from '../atoms/button'\r\nimport { Header } from '../atoms/container'\r\nimport LogoutButton from '../molecules/LogoutButton'\r\nimport { ThemeContext } from '../util/ThemeContext'\r\n\r\nconst RsHeader = (props: UserInfo) => {\r\n\r\n    const { isDark, darkToggler } = useContext(ThemeContext)\r\n\r\n    return (\r\n        <Header>\r\n            테마 변경\r\n            <ToggleButton>\r\n                <input type=\"checkbox\" checked={isDark} onChange={darkToggler}/>\r\n                <span/>\r\n            </ToggleButton>\r\n            {props.isAuth ? <LogoutButton dark={isDark}/> : null}\r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default RsHeader","import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${(props: ThemeProps) => props.theme.bgColor};\r\n    color: ${(props: ThemeProps) => props.theme.titleColor};\r\n    transition: all 0.50s linear;\r\n  }\r\n`","import { useEffect, useState } from \"react\";\nimport AppRouter from \"./AppRouter\";\nimport RsHeader from \"./components/organisms/RsHeader\";\nimport { GlobalStyles } from \"./components/style/globalStyles\";\nimport { postAPI } from \"./components/util/Apis\";\nimport { getNaverToken, setNaverToken } from \"./components/util/Cookie\";\n\nfunction App() {\n\n  const [User, setUser] = useState<UserInfo>()\n\n  // auth by Naver\n  const getAuthInfo = () => {\n    const url = new URL(window.location.href)\n    const data = {\n        code: url.searchParams.get(\"code\"),\n        state: url.searchParams.get(\"state\"),\n        accessToken: getNaverToken()\n    }\n    postAPI(\"/naver/auth\", data)\n    .then((res) => {\n        setUser(res.data)\n        if (res.data.isAuth) {\n          setNaverToken(res.data.accessToken)\n        }\n        if (data.code || data.state) {\n          // window.history.pushState({}, document.title, \"/\")\n          window.history.pushState({}, document.title, \"/rs-client/\")\n        }\n    })\n  }\n\n  useEffect(() => {\n    getAuthInfo()\n  }, [])\n\n  return (\n    <>\n      <GlobalStyles/>\n      <RsHeader {...User}/>\n      {User ? <AppRouter {...User}/> : null}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ThemeContextProvider from './components/util/ThemeContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContextProvider>\n      <App />\n    </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}